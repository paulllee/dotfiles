#!/usr/bin/env bash

# [d]ot[s]ync

set -e

if [[ "$#" == 0 ]]; then
  printf "$(basename "$0"): No flags provided. Please review usage via '$(basename "$0") -h'.\n"
  exit 1
fi

CONFIG_PATH="$HOME/.dotfiles/dotfiles/.config/"
DOTFILES_PATH="${DOTFILES_PATH:-$HOME/.dotfiles}"
if [[ ! -d "$DOTFILES_PATH" ]]; then
  printf "$DOTFILES_PATH is not a valid directory.\n"
  exit 1
fi

ITERM2_ID="$(osascript -e 'id of app "iTerm2"')"
MACMOUSEFIX_ID="$(osascript -e 'id of app "Mac Mouse Fix"')"
SWISH_ID="$(osascript -e 'id of app "Swish"')"

USAGE_MESSAGE=$(
cat <<- END
A series of helpers for your dotfiles

Usage: 
  $(basename "$0") [options]                         Uses default dotfiles path ($HOME/.dotfiles)
  [DOTFILES_PATH=<path>] $(basename "$0") [options]  Use custom dotfiles path

Options:
  -h  Print this help message
  -b  Backup mac applications
  -d  Dotfiles sync
  -g  Gitconfig sync
  -m  Mac defaults sync
  -p  Packages sync using Brewfile
  -v  VSCode extensions sync
END

b_flag=0
d_flag=0
g_flag=0
m_flag=0
p_flag=0
v_flag=0

while getopts "hbdgmpv" FLAG
do
  case "${FLAG}" in
    h) printf "$USAGE_MESSAGE\n" && exit 0 ;;
    b) b_flag=1 ;;
    d) d_flag=1 ;;
    g) g_flag=1 ;;
    m) m_flag=1 ;;
    p) p_flag=1 ;;
    v) v_flag=1 ;;
  esac
done

# this should be ran before anything to ensure all packages are installed
if (( p_flag )); then
  printf "\n\n>> Packages Installation Via Brewfile\n"

  brew bundle --file "$DOTFILES_PATH/Brewfile" --no-lock
  brew bundle --file "$DOTFILES_PATH/Brewfile" --force cleanup
  brew cleanup
  brew autoremove
fi

if (( b_flag )); then
  printf "\n\n>> Backup Mac Applications\n"

  cp "$CONFIG_PATH/iterm2/$ITERM2_ID.plist" "$CONFIG_PATH/iterm2/"
  cp "$HOME/Library/Application Support/$MACMOUSEFIX_ID/config.plist" "$CONFIG_PATH/macmousefix/"
  defaults export "$SWISH_ID" "$CONFIG_PATH/swish/$SWISH_ID.plist"
fi

if (( d_flag )); then
  printf "\n\n>> Dotfiles Sync\n"

  git -C "$DOTFILES_PATH" checkout main 1> /dev/null 2> /dev/null
  git -C "$DOTFILES_PATH" pull
  git -C "$DOTFILES_PATH" checkout -

  rsync --exclude ".DS_Store" -avhP "$DOTFILES_PATH/dotfiles/" "$HOME/"

  fd . "$HOME/.local/bin" --type f --exec-batch chmod +x {}

  cp "$CONFIG_PATH/macmousefix/config.plist" "$HOME/Library/Application Support/$MACMOUSEFIX_ID/"
  defaults import "$SWISH_ID" "$CONFIG_PATH/swish/$SWISH_ID.plist"
fi

if (( m_flag )); then
  printf "\n\n>> Mac Defaults Sync\n"

  # disabling DS_Store files in NFS
  defaults write com.apple.desktopservices DSDontWriteNetworkStores true

  # disabling press and hold so that we can key repeat on hold
  defaults write -g ApplePressAndHoldEnabled -bool false

  # enabling list view permenantly in Finder
  defaults write com.apple.Finder FXPreferredViewStyle Nlsv

  # enabling iTerm2 to use custom configuration from dotfiles
  defaults write com.googlecode.iterm2 PrefsCustomFolder -string "$CONFIG_PATH/iterm2/"
  defaults write com.googlecode.iterm2 LoadPrefsFromCustomFolder -bool true
fi

if (( g_flag )); then
  printf "\n\n>> Gitconfig Sync\n"

  # setting gitconfig with name and email + keygen
  read -p "Enter Git Name: " GIT_NAME
  read -p "Enter Git Email: " GIT_EMAIL

  git config --global user.name "$GIT_NAME"
  git config --global user.email "$GIT_EMAIL"

  ssh-keygen -t ed25519 -N "" -f "$HOME/.ssh/id_rsa"

  git config --global user.signingkey "$HOME/.ssh/id_rsa.pub"
  git config --global gpg.format ssh

  cat "$HOME/.gitconfig"
fi

if (( v_flag ));; then
  printf "\n\n>> VSCode Extensions Sync\n"

  source "$CONFIG_PATH/vscode/extensions"

  for EXTENSION in "${EXTENSIONS[@]}"; do
      code --install-extension "$EXTENSION" --force
  done

  # if there are extensions that are installed that aren't
  # in the extension list, uninstall them
  INSTALLED=( $(code --list-extensions) )
  for i in "${INSTALLED[@]}"; do
    SKIP=0
    for j in "${EXTENSIONS[@]}"; do
      if [[ "$i" == "$j" ]]; then
        SKIP=1
        break
      fi
    done
    (( SKIP )) || code --uninstall-extension "$i" --force
  done
fi

exec zsh -l
