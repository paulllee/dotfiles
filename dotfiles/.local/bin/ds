#!/usr/bin/env bash

# [d]ot[s]ync

set -e

if [[ "$#" == 0 ]]; then
  printf "$(basename "$0"): No flags provided. Please review usage via '$(basename "$0") -h'.\n"
  exit 1
fi

DOTFILES_PATH="${DOTFILES_PATH:-$HOME/.dotfiles}"
if [[ ! -d "$DOTFILES_PATH" ]]; then
  printf "$DOTFILES_PATH is not a valid directory.\n"
  exit 1
fi

DEV="$DOTFILES_PATH/dotfiles/.config/"
PROD="$HOME/.config/"

ITERM2="$(osascript -e 'id of app "iTerm2"')"
MACMOUSEFIX="$(osascript -e 'id of app "Mac Mouse Fix"')"
SWISH="$(osascript -e 'id of app "Swish"')"

USAGE_MESSAGE=$(
cat <<- END
A series of helpers for your dotfiles

Usage: 
  $(basename "$0") [options]                         Uses default dotfiles path ($HOME/.dotfiles)
  [DOTFILES_PATH=<path>] $(basename "$0") [options]  Use custom dotfiles path

Options:
  -h  Print this help message
  -b  Backup mac applications
  -d  Dotfiles sync
  -g  Gitconfig sync
  -m  Mac defaults sync
  -p  Packages sync using Brewfile
  -v  VSCode extensions sync
END
)

b_flag=0
d_flag=0
g_flag=0
m_flag=0
p_flag=0
v_flag=0

while getopts "hbdgmpv" FLAG
do
  case "${FLAG}" in
    h) printf "$USAGE_MESSAGE\n" && exit 0 ;;
    b) b_flag=1 ;;
    d) d_flag=1 ;;
    g) g_flag=1 ;;
    m) m_flag=1 ;;
    p) p_flag=1 ;;
    v) v_flag=1 ;;
  esac
done

if (( p_flag )); then  # MUST BE RAN FIRST!
  printf "\n> Packages Installation Via Brewfile\n\n"

  brew bundle --file "$DOTFILES_PATH/Brewfile" --no-lock
  brew upgrade

  brew bundle --file "$DOTFILES_PATH/Brewfile" --force cleanup
  brew cleanup
  brew autoremove
fi

if (( b_flag )); then
  printf "\n> Backup Mac Applications\n\n"

  printf "Backing up iTerm2.\n"
  cp "$PROD/iterm2/$ITERM2.plist" "$DEV/iterm2/"

  printf "Backing up Mac Mouse Fix.\n"
  cp "$HOME/Library/Application Support/$MACMOUSEFIX/config.plist" "$DEV/macmousefix/"

  printf "Backing up Swish.\n"
  defaults export "$SWISH" "$DEV/swish/$SWISH.plist"
fi

if (( d_flag )); then
  printf "\n> Dotfiles Sync\n\n"

  git -C "$DOTFILES_PATH" checkout main 1> /dev/null 2> /dev/null
  git -C "$DOTFILES_PATH" pull
  git -C "$DOTFILES_PATH" checkout -

  rsync --exclude ".DS_Store" -avhP "$DOTFILES_PATH/dotfiles/" "$HOME/"

  fd . "$HOME/.local/bin" --type f --exec-batch chmod +x {}

  printf "Manually Syncing Mac Mouse Fix and Swish.\n"
  cp "$PROD/macmousefix/config.plist" "$HOME/Library/Application Support/$MACMOUSEFIX/"
  defaults import "$SWISH" "$PROD/swish/$SWISH.plist"
fi

if (( g_flag )); then
  printf "\n> Gitconfig Sync\n\n"

  read -p "Enter Git Name: " GIT_NAME
  read -p "Enter Git Email: " GIT_EMAIL

  git config --global user.name "$GIT_NAME"
  git config --global user.email "$GIT_EMAIL"

  if [[ ! -f "$HOME/.ssh/id_rsa" ]]; then
    ssh-keygen -t ed25519 -N "" -f "$HOME/.ssh/id_rsa"
  fi

  git config --global gpg.format ssh
  git config --global user.signingkey "$HOME/.ssh/id_rsa.pub"

  cat "$HOME/.gitconfig"
fi

if (( m_flag )); then
  printf "\n> Mac Defaults Sync\n\n"

  printf "Disabling DS_Store files in NFS.\n"
  defaults write com.apple.desktopservices DSDontWriteNetworkStores true

  printf "Disabling press and hold so that we can key repeat on hold.\n"
  defaults write -g ApplePressAndHoldEnabled -bool false

  printf "Enabling list view permenantly in Finder.\n"
  defaults write com.apple.Finder FXPreferredViewStyle Nlsv

  printf "Enabling iTerm2 to use custom configuration from dotfiles.\n"
  defaults write com.googlecode.iterm2 PrefsCustomFolder -string "$PROD/iterm2/"
  defaults write com.googlecode.iterm2 LoadPrefsFromCustomFolder -bool true
fi

if (( v_flag )); then
  printf "\n> VSCode Extensions Sync\n\n"

  source "$PROD/vscode/extensions"

  for EXTENSION in "${EXTENSIONS[@]}"; do
      code --install-extension "$EXTENSION" --force
  done

  INSTALLED=( $(code --list-extensions) )
  for i in "${INSTALLED[@]}"; do
    SKIP=0
    for j in "${EXTENSIONS[@]}"; do
      if [[ "$i" == "$j" ]]; then
        SKIP=1
        break
      fi
    done
    (( SKIP )) || code --uninstall-extension "$i" --force
  done
fi

exec zsh -l
