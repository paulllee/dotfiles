#!/usr/bin/env bash

# [d]ot[s]ync

set -e

if [[ "$#" == 0 ]]; then
  printf "$(basename "$0"): No flags provided. Please review usage via '$(basename "$0") -h'.\n"
  exit 1
fi

DOTFILES_PATH="${DOTFILES_PATH:-$HOME/.dotfiles}"
if [[ ! -d "$DOTFILES_PATH" ]]; then
  printf "$DOTFILES_PATH is not a valid directory.\n"
  exit 1
fi

function printf_h() {
  printf "\n\033[1;34m==>\033[1;39m ${1}\033[0m\n\n"
}

USAGE_MESSAGE=$(
cat <<- END
A series of helpers for your dotfiles

Usage: 
  $(basename "$0") [options]                         Uses default dotfiles path ($HOME/.dotfiles)
  [DOTFILES_PATH=<path>] $(basename "$0") [options]  Use custom dotfiles path
  $(basename "$0") [options] && exec zsh -l          Useful to reload your zsh session

Options:
  -h  Print this help message
  -d  Dotfiles sync
  -g  Gitconfig sync
  -m  Mac sync
  -p  Packages sync
END
)

d_flag=0
g_flag=0
m_flag=0
p_flag=0

while getopts "hdgmp" FLAG
do
  case "${FLAG}" in
    h) printf "$USAGE_MESSAGE\n" && exit 0 ;;
    d) d_flag=1 ;;
    g) g_flag=1 ;;
    m) m_flag=1 ;;
    p) p_flag=1 ;;
  esac
done

if (( p_flag )); then  # MUST BE RAN FIRST!
  printf_h "Packages Sync"

  brew bundle --file "$DOTFILES_PATH/Brewfile" --no-lock
  brew upgrade

  brew bundle --file "$DOTFILES_PATH/Brewfile" --force cleanup
  brew cleanup
  brew autoremove
fi

if (( d_flag )); then
  printf_h "Dotfiles Sync"

  git -C "$DOTFILES_PATH" checkout main 1> /dev/null 2> /dev/null
  git -C "$DOTFILES_PATH" pull
  git -C "$DOTFILES_PATH" checkout -

  rsync --exclude ".DS_Store" -avhP "$DOTFILES_PATH/dotfiles/" "$HOME/"

  fd . "$HOME/.local/bin" --type f --exec-batch chmod +x {}
fi

if (( g_flag )); then
  printf_h "Gitconfig Sync"

  read -p "Enter Git Name: " GIT_NAME
  read -p "Enter Git Email: " GIT_EMAIL

  git config --global user.name "$GIT_NAME"
  git config --global user.email "$GIT_EMAIL"

  if [[ ! -f "$HOME/.ssh/id_rsa" ]]; then
    ssh-keygen -t ed25519 -N "" -f "$HOME/.ssh/id_rsa"
  fi

  git config --global gpg.format ssh
  git config --global user.signingkey "$HOME/.ssh/id_rsa.pub"

  cat "$HOME/.gitconfig"
fi

if (( m_flag )); then
  printf_h "Mac Sync"

  if [[ "$OSTYPE" == "darwin"* ]]; then
    printf "Setting common Mac settings.\n"

    defaults write com.apple.desktopservices DSDontWriteNetworkStores true
    defaults write -g ApplePressAndHoldEnabled -bool false
    defaults write com.apple.Finder FXPreferredViewStyle Nlsv

    printf "Setting up Mac specific applications manually.\n"

    ITERM2="$(osascript -e 'id of app "iTerm2"')"
    defaults write "$ITERM2" PrefsCustomFolder -string "$HOME/.config/mac"
    defaults write "$ITERM2" LoadPrefsFromCustomFolder -bool true

    SWISH="$(osascript -e 'id of app "Swish"')"
    defaults import "$SWISH" "$HOME/.config/mac/$SWISH.plist"
    
    MACMOUSEFIX="$(osascript -e 'id of app "Mac Mouse Fix"')"
    cp "$HOME/.config/mac/config.plist" "$HOME/Library/Application Support/$MACMOUSEFIX/"
  else
    printf "Skipping because detected OS is not Mac.\n"
  fi
fi

printf_h "Sync completed!"
