#!/usr/bin/env bash

# [d]ot [s]ync

set -e

if [[ "$#" == 0 ]]; then
  printf "$(basename "$0"): No flags provided. "
  printf "Please review usage via '$(basename "$0") -h'.\n"
  exit 1
fi

DOTFILES_PATH="${DOTFILES_PATH:-$HOME/.dotfiles}"
if [[ ! -d "$DOTFILES_PATH" ]]; then
  printf "$DOTFILES_PATH is not a valid directory.\n"
  exit 1
fi

function printf_h() {
  printf "\n\033[1;34m==>\033[1;39m ${1}\033[0m\n\n"
}

USAGE_MESSAGE=$(
cat <<- END
A series of helpers for your dotfiles

Usage:
  $(basename "$0") [options]
    Uses default dotfiles path ($HOME/.dotfiles)

  [DOTFILES_PATH=<path>] $(basename "$0") [options]
    Use custom dotfiles path

Options:
  -h  Print this help message
  -d  Dotfiles sync
  -e  Environment sync
  -g  Gitconfig sync
  -m  Mac sync
  -p  Packages sync
END
)

d_flag=0
e_flag=0
g_flag=0
m_flag=0
p_flag=0

while getopts "hdegmp" FLAG
do
  case "${FLAG}" in
    h) printf "$USAGE_MESSAGE\n" && exit 0 ;;
    d) d_flag=1 ;;
    e) e_flag=1 ;;
    g) g_flag=1 ;;
    m) m_flag=1 ;;
    p) p_flag=1 ;;
  esac
done

if (( p_flag )); then  # MUST BE RAN FIRST!
  printf_h "Packages Sync"

  brew bundle --file "$DOTFILES_PATH/Brewfile" --no-lock
  brew upgrade

  brew bundle --file "$DOTFILES_PATH/Brewfile" --force cleanup
  brew cleanup
  brew autoremove
fi

if (( d_flag )); then
  printf_h "Dotfiles Sync"

  git -C "$DOTFILES_PATH" checkout main 1> /dev/null 2> /dev/null
  git -C "$DOTFILES_PATH" pull
  git -C "$DOTFILES_PATH" checkout -

  rsync --exclude ".DS_Store" -avhP "$DOTFILES_PATH/dotfiles/" "$HOME/"

  fd . "$HOME/.local/bin" --type f --exec-batch chmod +x {}
fi

if (( e_flag )); then
  printf_h "Environment Sync"

  # setup temp pipx binary for installing python executables
  python3 -m venv /tmp/venv
  /tmp/venv/bin/pip install pipx

  # lua
  brew install lua-language-server

  # python
  /tmp/venv/bin/pipx install poetry
  /tmp/venv/bin/pipx install ruff
  /tmp/venv/bin/pipx install ruff-lsp
  npm install -g pyright

  # json
  npm install -g vscode-json-languageserver
fi

if (( g_flag )); then
  printf_h "Gitconfig Sync"

  read -p "Enter Git Name: " GIT_NAME
  read -p "Enter Git Email: " GIT_EMAIL

  git config --global user.name "$GIT_NAME"
  git config --global user.email "$GIT_EMAIL"

  if [[ ! -f "$HOME/.ssh/id_rsa" ]]; then
    ssh-keygen -t ed25519 -N "" -f "$HOME/.ssh/id_rsa"
  fi

  git config --global gpg.format ssh
  git config --global user.signingkey "$HOME/.ssh/id_rsa.pub"

  git config --global pull.rebase false

  git config --global merge.tool nvimdiff
  git config --global mergetool.keepBackup false
  git config --global mergetool.prompt false

  cat "$HOME/.gitconfig"
fi

if (( m_flag )); then
  printf_h "Mac Sync"

  printf "Setting common Mac defaults.\n"

  defaults write com.apple.desktopservices DSDontWriteNetworkStores true
  defaults write -g ApplePressAndHoldEnabled -bool false
  defaults write com.apple.Finder FXPreferredViewStyle Nlsv

  printf "Setting up Mac specific applications manually.\n"

  BACKUPS="$DOTFILES_PATH/backups"
  APP_SUPPORT="$HOME/Library/Application Support"

  SWISH="$(osascript -e 'id of app "Swish"')"
  defaults import "$SWISH" "$BACKUPS/swish.plist"

  MACMOUSEFIX="$(osascript -e 'id of app "Mac Mouse Fix"')"
  cp "$BACKUPS/macmousefix.plist" "$APP_SUPPORT/$MACMOUSEFIX/config.plist"
fi

printf_h "Sync Completed :)"
