#!/usr/bin/env bash

function printf_h () {
    printf "\n> $1\n\n"
}

function abort() {
    printf "ERROR: $1\n"
    exit 1
}

DOTFILES_PATH=${DOTFILES_PATH:-$HOME/.dotfiles}
[[ ! -d $DOTFILES_PATH ]] && \
    abort "$DOTFILES_PATH is not a valid directory."

BOOTSTRAP_MODE=${BOOTSTRAP_MODE:-0}  # skips `exec zsh -l` if enabled

USAGE_MESSAGE=$(
cat <<- END
A series of helpers for your dotfiles

Usage: 
    $(basename "$0") [options]                         Uses default dotfiles path ($HOME/.dotfiles)
    [DOTFILES_PATH=<path>] $(basename "$0") [options]  Use custom dotfiles path

Options:
    -h  Print this help message
    -b  Install packages from Brewfile in dotfiles directory
    -c  Clean Homebrew with package upgrades and match Brewfile packages with local
    -g  Git configuration
    -m  Mac defaults configuration
    -s  Sync dotfiles
    -v  VSCode extension sync; installs any missing extensions and uninstalls unexpected extensions

Examples:
    $(basename "$0") -ms  Mac default Configuration and dotfiles sync
END
)

b_flag=0
c_flag=0
g_flag=0
m_flag=0
s_flag=0
v_flag=0

while getopts "hbcgmsv" FLAG
do
    case "${FLAG}" in
        h) printf "$USAGE_MESSAGE\n" && exit 0 ;;
        b) b_flag=1 ;;
        c) c_flag=1 ;;
        g) g_flag=1 ;;
        m) m_flag=1 ;;
        s) s_flag=1 ;;
        v) v_flag=1 ;;
    esac
done

(( ! b_flag && ! c_flag && ! g_flag && ! m_flag && ! s_flag  && ! v_flag )) && \
    abort "No flags provided. Please review usage via '$(basename "$0") -h'."

if (( b_flag ))
then
    printf_h "Brewfile Installation"

    brew bundle --file $DOTFILES_PATH/Brewfile --no-lock
fi

if (( c_flag ))
then
    printf_h "Homebrew Spring Cleaning"

    brew upgrade
    brew upgrade --cask
    mas upgrade

    brew cleanup
    brew bundle --file $DOTFILES_PATH/Brewfile --force cleanup
    brew autoremove
fi

if (( g_flag ))
then
    printf_h "Gitconfig Configuration"

    read -p "Enter Git Name: " GIT_NAME
    read -p "Enter Git Email: " GIT_EMAIL

    git config --global user.name "$GIT_NAME"
    git config --global user.email "$GIT_EMAIL"
    git config --global user.signingkey $HOME/.ssh/id_rsa.pub
    git config --global gpg.format ssh

    cat $HOME/.gitconfig
fi

if (( m_flag ))
then
    printf_h "Mac Defaults Configuration"

    printf "Disabling DS_Store files in NFS.\n"
    defaults write com.apple.desktopservices DSDontWriteNetworkStores true

    printf "Disabling press and hold so that we can key repeat on hold.\n"
    defaults write -g ApplePressAndHoldEnabled -bool false

    printf "Enabling list view permenantly in Finder.\n"
    defaults write com.apple.Finder FXPreferredViewStyle Nlsv

    printf "Enabling iTerm2 to use custom configuration from dotfiles.\n"
    defaults write com.googlecode.iterm2 PrefsCustomFolder -string "$HOME/.config/iterm2_user"
    defaults write com.googlecode.iterm2 LoadPrefsFromCustomFolder -bool true
fi

if (( s_flag ))
then
    printf_h "Sync Dotfiles"

    git -C $DOTFILES_PATH checkout main 1> /dev/null 2> /dev/null
    git -C $DOTFILES_PATH pull
    git -C $DOTFILES_PATH checkout -

    rsync --exclude ".DS_Store" -avhP $DOTFILES_PATH/dotfiles/ $HOME/
    chmod +x $HOME/.local/bin/dotsync
fi

if (( v_flag ))
then
    printf_h "VSCode Extension Sync"

    source $HOME/.config/vscode/extensions

    for EXTENSION in "${EXTENSIONS[@]}"; do
        code --install-extension $EXTENSION --force
    done

    # this checks for INSTALLED - EXPECTED difference
    INSTALLED=( $(code --list-extensions) )
    TO_UNINSTALL=()
    for i in "${INSTALLED[@]}"; do
        skip=
        for j in "${EXTENSIONS[@]}"; do
            [[ $i == $j ]] && { skip=1; break; }
        done
        [[ -n $skip ]] || TO_UNINSTALL+=("$i")
    done

    for EXTENSION in "${TO_UNINSTALL[@]}"; do
        code --uninstall-extension $EXTENSION --force
    done
fi

printf "\n"  # for formatting reasons

(( ! BOOTSTRAP_MODE )) && exec zsh -l
